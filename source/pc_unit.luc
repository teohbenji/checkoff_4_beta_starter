module pc_unit (
    input clk,  // clock
    input rst,  // reset
    input slowclk, // slowclock to advance pc
    input id[16],
    input pcsel[3],
    input reg_data_1[32],
    output pc_4[32],
    output pc_4_sxtc[32],
    output pcsel_out[32], // for debug only, does not exist in pc_unit
    output ia[32]
  ) {

  dff pc[32](#INIT(0),.clk(clk)); // PC Register

  sig pcsel_out_sig[32];
  sig pc_4_sxtc_32_sig[32];
  sig pc_4_sxtc_sig[32];
  sig pc_4_sig[32];
  
  always {
  
    // initial setups to silence output compilation errors
    pc_4_sig = 0;
    pc_4_sxtc_sig = 0;
    pcsel_out_sig = 0;
    
    ia = pc.q;  // ia is value of pc at pc dff
    
    // increment pc by 4
    pc_4_sig = c{pc.q[31], pc.q[30:0] + 4};            
    
    // TASK 4
    // shift-and-add pc by 4
    pc_4_sxtc_32_sig = pc_4_sig + (4 * c{16x{id[15]}, id[15:0]}); // implement intermediary signal: pc + 4 + SXT(C)
    pc_4_sxtc_sig = c{pc_4_sig[31], pc_4_sxtc_32_sig[30:2] ,b00} ;// preserve the supervisor bit
    
      
    

    
    // TASK 1 
    // PCSEL mux 
    // consider all cases of pcsel signals 
    // for JMP, make sure to compute the supervisor bit properly 
    // for ILLOP and IRQ handlers, ensure that the supervisor bit is set to 1
    if(pcsel[2] == b1) {
      pcsel_out_sig = b10000000000000000000000000001000; //0x80000008
    } else {
        case (pcsel[1:0]){
          h00: pcsel_out_sig = pc_4_sig; // output from #1 32 bit full adder
          h01: pcsel_out_sig = pc_4_sxtc_sig;// output from #2 32 bit full adder
          h10: pcsel_out_sig = c{pc_4_sig[31], reg_data_1[30:2], b00};
          h11: pcsel_out_sig = b10000000000000000000000000000100; //0x80000004
          
         
          default: // just a default case to silence warnings 
            pcsel_out_sig = pc.q;        
          
       }
    }
    
    // advance the PC only when slowclk is 1 
        if (slowclk){
            pc.d = pcsel_out_sig;
          // set the content of pcreg to be its next value only when slowclk == reg_data_1
        }

    // Task 2
    // RESET mux 
    if (rst){
      pcsel_out_sig = b10000000000000000000000000000000;}  //0x80000000 when RESET is asserted
    else {
      pcsel_out_sig = pcsel_out_sig;} // no change// no reset
      

    
    // output connections
    ia = pc.q;
    pc_4 =  pc_4_sig;
    pc_4_sxtc = pc_4_sxtc_sig;
    pcsel_out = pcsel_out_sig;
    
    
  }

